// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=getDateOfBirth_c71a70f64e
ROOST_METHOD_SIG_HASH=getDateOfBirth_2c09ea3434

"""
Scenario 1: Test to verify that the correct Date of Birth is returned

Details:
  TestName: testGetDateOfBirth.
  Description: This test is meant to check whether the getDateOfBirth() method returns the correct date of birth of the customer. The target scenario is when the date of birth has been set and the method is invoked.
Execution:
  Arrange: Create a new Customer object and set a date of birth.
  Act: Invoke the getDateOfBirth method on the Customer object.
  Assert: Use JUnit assertions to compare the returned date of birth against the date of birth that had been set.
Validation:
  The assertion aims to verify that the returned date of birth is exactly the same as the date of birth that was set. This is important to ensure that the method is correctly retrieving the customer's date of birth.

Scenario 2: Test to verify that null is returned when the Date of Birth has not been set

Details:
  TestName: testGetDateOfBirthWhenNotSet.
  Description: This test is meant to check whether the getDateOfBirth() method returns null when the date of birth has not been set. The target scenario is when a new Customer object is created but the date of birth is not set.
Execution:
  Arrange: Create a new Customer object without setting a date of birth.
  Act: Invoke the getDateOfBirth method on the Customer object.
  Assert: Use JUnit assertions to check that the returned date of birth is null.
Validation:
  The assertion aims to verify that the method correctly handles the case when the date of birth has not been set, by returning null. This is important to ensure that the method does not throw an exception or return an incorrect value in this scenario.

Scenario 3: Test to verify that changing the returned Date of Birth does not affect the original Date of Birth

Details:
  TestName: testGetDateOfBirthImmutability.
  Description: This test is meant to check that changes to the date of birth returned by the getDateOfBirth() method do not affect the original date of birth stored in the Customer object. The target scenario is when the date of birth has been set and the method is invoked, and the returned date of birth is then modified.
Execution:
  Arrange: Create a new Customer object and set a date of birth.
  Act: Invoke the getDateOfBirth method on the Customer object, and then modify the returned date of birth.
  Assert: Use JUnit assertions to compare the original date of birth against the modified date of birth.
Validation:
  The assertion aims to verify that the original date of birth has not been changed even though the returned date of birth was modified. This is important to ensure the immutability of the date of birth in the Customer object.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.agoncal.application.petstore.model.Customer;
import org.agoncal.application.petstore.model.Address;
import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import java.util.Date;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

public class CustomerGetDateOfBirthTest {

	private Customer customer;

	@Before
	public void setUp() {
		customer = new Customer();
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetDateOfBirth() {
		Date dateOfBirth = new Date();
		customer.setDateOfBirth(dateOfBirth);
		Date returnedDateOfBirth = customer.getDateOfBirth();
		assertEquals("The returned date of birth should be the same as the one set", dateOfBirth, returnedDateOfBirth);
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetDateOfBirthWhenNotSet() {
		Date returnedDateOfBirth = customer.getDateOfBirth();
		assertNull("The returned date of birth should be null when it has not been set", returnedDateOfBirth);
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetDateOfBirthImmutability() {
		Date dateOfBirth = new Date();
		customer.setDateOfBirth(dateOfBirth);
		Date returnedDateOfBirth = customer.getDateOfBirth();
		returnedDateOfBirth.setTime(0);
		assertEquals("The original date of birth should not be affected when the returned date of birth is modified",
				dateOfBirth, customer.getDateOfBirth());
	}

}