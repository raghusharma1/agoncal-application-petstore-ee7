// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=getFirstName_250655c872
ROOST_METHOD_SIG_HASH=getFirstName_94e06d272a

Scenario 1: Test to check if getFirstName() returns the correct value

Details:
  TestName: testGetFirstNameReturnsCorrectValue.
  Description: This test is meant to check if the getFirstName() method returns the correct first name of the Customer. The method is expected to return the first name that has been set previously using setFirstName() method.
Execution:
  Arrange: Create a new Customer object and set a first name using setFirstName() method.
  Act: Invoke the getFirstName() method on the Customer object.
  Assert: Use JUnit assertions to compare the returned value against the value set previously.
Validation:
  The assertion aims to verify that the getFirstName() method correctly retrieves the first name of the Customer. The expected result is the first name that was set previously. This test is significant in the context of application behavior as it ensures that the correct first name of the Customer can be retrieved.

Scenario 2: Test to check if getFirstName() returns null when the first name is not set

Details:
  TestName: testGetFirstNameReturnsNullWhenNotSet.
  Description: This test is meant to check if the getFirstName() method returns null when the first name of the Customer has not been set. The method is expected to return null in such cases.
Execution:
  Arrange: Create a new Customer object without setting a first name.
  Act: Invoke the getFirstName() method on the Customer object.
  Assert: Use JUnit assertions to compare the returned value against null.
Validation:
  The assertion aims to verify that the getFirstName() method correctly handles the case when the first name of the Customer has not been set. The expected result is null. This test is significant in the context of application behavior as it ensures that the method can handle such edge cases without throwing an exception.
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import org.agoncal.application.petstore.model.Customer;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

public class CustomerGetFirstNameTest {

	@Test
	@Category(Categories.valid.class)
	public void testGetFirstNameReturnsCorrectValue() {
		// Arrange
		Customer customer = new Customer();
		String expectedFirstName = "John";
		customer.setFirstName(expectedFirstName);
		// Act
		String actualFirstName = customer.getFirstName();
		// Assert
		assertEquals("The expected first name does not match the actual first name", expectedFirstName,
				actualFirstName);
	}

	@Test
	@Category(Categories.boundary.class)
	public void testGetFirstNameReturnsNullWhenNotSet() {
		// Arrange
		Customer customer = new Customer();
		// Act
		String actualFirstName = customer.getFirstName();
		// Assert
		assertNull("The first name should be null as it was not set", actualFirstName);
	}

}