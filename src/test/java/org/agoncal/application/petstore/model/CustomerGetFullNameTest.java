// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=getFullName_15581f7a50
ROOST_METHOD_SIG_HASH=getFullName_a3a8c40aad

"""
Scenario 1: Testing getFullName with valid first name and last name
  Details:
    TestName: shouldReturnFullNameWhenFirstAndLastNameAreValid.
    Description: This test case is meant to check if the getFullName method returns the correct full name when both first and last names are valid and non-null.
  Execution:
    Arrange: Create a Customer entity and set a valid first name and last name.
    Act: Invoke the getFullName method.
    Assert: Compare the actual returned full name with the expected full name.
  Validation:
    The assertion aims to verify that the getFullName method correctly concatenates the first name and last name with a space in between. The expected result is based on the standard format of a full name (firstName + " " + lastName). This test is significant in ensuring that the method correctly handles valid input and returns the expected output.

Scenario 2: Testing getFullName with null first name
  Details:
    TestName: shouldReturnLastNameWhenFirstNameIsNull.
    Description: This test case is meant to check if the getFullName method correctly handles the scenario where the first name is null.
  Execution:
    Arrange: Create a Customer entity and set the first name as null and last name as valid.
    Act: Invoke the getFullName method.
    Assert: Compare the actual returned full name with the expected full name.
  Validation:
    The assertion aims to verify that the getFullName method correctly handles the scenario of a null first name by returning only the last name. The expected result is the last name since a null string concatenated with another string results in the non-null string. This test is significant in ensuring that the method correctly handles edge cases and does not throw a NullPointerException.

Scenario 3: Testing getFullName with null last name
  Details:
    TestName: shouldReturnFirstNameWhenLastNameIsNull.
    Description: This test case is meant to check if the getFullName method correctly handles the scenario where the last name is null.
  Execution:
    Arrange: Create a Customer entity and set the last name as null and first name as valid.
    Act: Invoke the getFullName method.
    Assert: Compare the actual returned full name with the expected full name.
  Validation:
    The assertion aims to verify that the getFullName method correctly handles the scenario of a null last name by returning only the first name. The expected result is the first name since a null string concatenated with another string results in the non-null string. This test is significant in ensuring that the method correctly handles edge cases and does not throw a NullPointerException.

Scenario 4: Testing getFullName with both first name and last name as null
  Details:
    TestName: shouldReturnNullWhenBothNamesAreNull.
    Description: This test case is meant to check if the getFullName method correctly handles the scenario where both first name and last name are null.
  Execution:
    Arrange: Create a Customer entity and set both first name and last name as null.
    Act: Invoke the getFullName method.
    Assert: Assert that the returned full name is null.
  Validation:
    The assertion aims to verify that the getFullName method correctly handles the scenario where both names are null by returning null. The expected result is null since null concatenated with null results in null. This test is significant in ensuring that the method correctly handles edge cases and does not throw a NullPointerException.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;
import org.junit.experimental.categories.Category;
import org.agoncal.application.petstore.model.Customer;
import org.agoncal.application.petstore.model.Address;
import org.agoncal.application.petstore.model.Country;
import java.util.Arrays;
import java.util.Collection;
import static org.junit.Assert.assertEquals;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

@RunWith(Parameterized.class)
public class CustomerGetFullNameTest {

	private String firstName;

	private String lastName;

	private String expectedFullName;

	public CustomerGetFullNameTest(String firstName, String lastName, String expectedFullName) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.expectedFullName = expectedFullName;
	}

	@Parameterized.Parameters
	public static Collection<Object[]> testData() {
		return Arrays.asList(new Object[][] { { "John", "Doe", "John Doe" }, // Valid
																				// scenario
				{ null, "Doe", "Doe" }, // Null first name
				{ "John", null, "John" }, // Null last name
				{ null, null, null } // Both names null
		});
	}

	@Test
	@Category(Categories.valid.class)
	public void shouldReturnFullNameWhenFirstAndLastNameAreValid() {
		Customer customer = new Customer();
		customer.setFirstName(firstName);
		customer.setLastName(lastName);
		String actualFullName = customer.getFullName();
		assertEquals(expectedFullName, actualFullName);
	}

	@Test
	@Category(Categories.invalid.class)
	public void shouldReturnLastNameWhenFirstNameIsNull() {
		if (firstName == null && lastName != null) {
			Customer customer = new Customer();
			customer.setFirstName(firstName);
			customer.setLastName(lastName);
			String actualFullName = customer.getFullName();
			assertEquals(expectedFullName, actualFullName);
		}
	}

	@Test
	@Category(Categories.invalid.class)
	public void shouldReturnFirstNameWhenLastNameIsNull() {
		if (firstName != null && lastName == null) {
			Customer customer = new Customer();
			customer.setFirstName(firstName);
			customer.setLastName(lastName);
			String actualFullName = customer.getFullName();
			assertEquals(expectedFullName, actualFullName);
		}
	}

	@Test
	@Category(Categories.invalid.class)
	public void shouldReturnNullWhenBothNamesAreNull() {
		if (firstName == null && lastName == null) {
			Customer customer = new Customer();
			customer.setFirstName(firstName);
			customer.setLastName(lastName);
			String actualFullName = customer.getFullName();
			assertEquals(expectedFullName, actualFullName);
		}
	}

}