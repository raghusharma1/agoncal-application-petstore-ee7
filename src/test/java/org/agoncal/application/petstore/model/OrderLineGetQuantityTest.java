// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=getQuantity_302723429c
ROOST_METHOD_SIG_HASH=getQuantity_e46401ecc6

"""
Scenario 1: Test to check if getQuantity method returns the correct quantity

Details:
  TestName: testGetQuantityReturnsCorrectValue
  Description: This test is meant to check if the getQuantity method returns the correct quantity of the OrderLine.
Execution:
  Arrange: Create an instance of OrderLine and set a specific quantity using setQuantity() method.
  Act: Invoke the getQuantity method on the created OrderLine instance.
  Assert: Use JUnit assertions to compare the actual result returned by the getQuantity method against the expected quantity we set earlier.
Validation:
  The assertion aims to verify that the getQuantity method correctly returns the quantity we set. The expected result is the same quantity we set earlier.
  This test is significant as it ensures the getQuantity method is functioning correctly, which is crucial for correct order processing and inventory management.

Scenario 2: Test to check if getQuantity method returns null when quantity is not set

Details:
  TestName: testGetQuantityReturnsNullWhenNotSet
  Description: This test is meant to check if the getQuantity method returns null when the quantity of the OrderLine has not been set.
Execution:
  Arrange: Create an instance of OrderLine without setting a quantity.
  Act: Invoke the getQuantity method on the created OrderLine instance.
  Assert: Use JUnit assertions to assert that the result returned by the getQuantity method is null.
Validation:
  The assertion aims to verify that the getQuantity method correctly returns null when the quantity has not been set. The expected result is null.
  This test is significant as it ensures the getQuantity method is functioning correctly, which is crucial for correct order processing and inventory management.

Scenario 3: Test to check if getQuantity method returns the correct quantity after changing the quantity

Details:
  TestName: testGetQuantityReturnsCorrectValueAfterChange
  Description: This test is meant to check if the getQuantity method returns the correct quantity of the OrderLine even after the quantity has been changed.
Execution:
  Arrange: Create an instance of OrderLine and set a specific quantity. Then change the quantity to a different value.
  Act: Invoke the getQuantity method on the created OrderLine instance.
  Assert: Use JUnit assertions to compare the actual result returned by the getQuantity method against the new quantity we set.
Validation:
  The assertion aims to verify that the getQuantity method correctly returns the new quantity we set. The expected result is the new quantity.
  This test is significant as it ensures the getQuantity method is functioning correctly, which is crucial for correct order processing and inventory management.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.*;
import javax.persistence.*;
import javax.validation.constraints.Min;
import java.io.Serializable;
import java.util.Objects;

public class OrderLineGetQuantityTest {

	@Test
	@Category(Categories.valid.class)
	public void testGetQuantityReturnsCorrectValue() {
		OrderLine orderLine = new OrderLine();
		Integer expectedQuantity = 5;
		orderLine.setQuantity(expectedQuantity);
		Integer actualQuantity = orderLine.getQuantity();
		assertNotNull(actualQuantity);
		assertEquals(expectedQuantity, actualQuantity);
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetQuantityReturnsNullWhenNotSet() {
		OrderLine orderLine = new OrderLine();
		Integer actualQuantity = orderLine.getQuantity();
		assertNull(actualQuantity);
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetQuantityReturnsCorrectValueAfterChange() {
		OrderLine orderLine = new OrderLine();
		orderLine.setQuantity(5);
		Integer newQuantity = 10;
		orderLine.setQuantity(newQuantity);
		Integer actualQuantity = orderLine.getQuantity();
		assertNotNull(actualQuantity);
		assertEquals(newQuantity, actualQuantity);
	}

}