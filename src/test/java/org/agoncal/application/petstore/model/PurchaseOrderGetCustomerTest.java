// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=getCustomer_00731f7aaf
ROOST_METHOD_SIG_HASH=getCustomer_038e8ac9eb

"""
Scenario 1: Test to Validate Correct Customer Retrieval

Details:
  TestName: testCorrectCustomerRetrieval.
  Description: The test is intended to validate the correct retrieval of the customer object associated with a purchase order.

Execution:
  Arrange: Create a PurchaseOrder object and set a Customer object to it using setCustomer method.
  Act: Invoke the getCustomer() method on the PurchaseOrder object.
  Assert: Assert that the returned Customer object is the same as the one set initially.

Validation:
  The assertion verifies that the getCustomer() method correctly returns the Customer object associated with the PurchaseOrder. This is critical as it ensures that the correct customer details are retrieved for a given purchase order.

Scenario 2: Test to Validate Null Customer Scenario

Details:
  TestName: testNullCustomerScenario.
  Description: The test is intended to handle the scenario where there is no Customer object associated with a PurchaseOrder.

Execution:
  Arrange: Create a PurchaseOrder object without setting a Customer.
  Act: Invoke the getCustomer() method on the PurchaseOrder object.
  Assert: Assert that the returned Customer object is null.

Validation:
  The assertion verifies that the getCustomer() method correctly handles the scenario where no Customer object is associated with the PurchaseOrder. This is important as it prevents null pointer exceptions in scenarios where a customer has not been assigned to a purchase order.

Scenario 3: Test to Validate Customer Retrieval After Multiple Sets

Details:
  TestName: testMultipleSetCustomer.
  Description: The test is intended to check the scenario where the Customer object associated with a PurchaseOrder is changed multiple times.

Execution:
  Arrange: Create a PurchaseOrder object and set multiple Customer objects to it using setCustomer method multiple times.
  Act: Invoke the getCustomer() method on the PurchaseOrder object.
  Assert: Assert that the returned Customer object is the same as the last one set.

Validation:
  The assertion verifies that the getCustomer() method correctly returns the last Customer object set to the PurchaseOrder. This is crucial as it ensures the correct customer details are retrieved in scenarios where a purchase order is reassigned to a different customer.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.*;
import javax.persistence.*;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

public class PurchaseOrderGetCustomerTest {

	@Test
	@Category(Categories.valid.class)
	public void testCorrectCustomerRetrieval() {
		// Arrange
		PurchaseOrder po = new PurchaseOrder();
		Customer customer = new Customer();
		po.setCustomer(customer);
		// Act
		Customer retrievedCustomer = po.getCustomer();
		// Assert
		assertEquals("The returned customer should be the same as the one set initially", customer, retrievedCustomer);
	}

	@Test
	@Category(Categories.invalid.class)
	public void testNullCustomerScenario() {
		// Arrange
		PurchaseOrder po = new PurchaseOrder();
		// Act
		Customer retrievedCustomer = po.getCustomer();
		// Assert
		assertNull("The returned customer should be null as no customer was set", retrievedCustomer);
	}

	@Test
	@Category(Categories.valid.class)
	public void testMultipleSetCustomer() {
		// Arrange
		PurchaseOrder po = new PurchaseOrder();
		Customer customer1 = new Customer();
		Customer customer2 = new Customer();
		po.setCustomer(customer1);
		po.setCustomer(customer2);
		// Act
		Customer retrievedCustomer = po.getCustomer();
		// Assert
		assertEquals("The returned customer should be the same as the last one set", customer2, retrievedCustomer);
	}

}