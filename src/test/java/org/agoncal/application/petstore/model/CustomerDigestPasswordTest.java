// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=digestPassword_5cc9f80b9c
ROOST_METHOD_SIG_HASH=digestPassword_496707f87e

Scenario 1: Test to check if the digestPassword method successfully digests and encodes a plain text password.

Details:
  TestName: testDigestPasswordWithValidInput.
  Description: This test checks if the digestPassword method successfully digests and encodes a plain text password using SHA-256 and Base64.
Execution:
  Arrange: Create a plain text password.
  Act: Call the digestPassword method with the plain text password.
  Assert: The returned string should not be null and should not be equal to the plain text password.
Validation:
  The assertion verifies that the method successfully digests and encodes the password. The returned string should be different from the input plain text password, indicating that the password has been digested and encoded.

Scenario 2: Test to check if the digestPassword method throws an exception when a null password is passed.

Details:
  TestName: testDigestPasswordWithNullInput.
  Description: This test checks if the digestPassword method throws a runtime exception when a null password is passed.
Execution:
  Arrange: Create a null password.
  Act: Call the digestPassword method with the null password.
  Assert: A RuntimeException should be thrown.
Validation:
  The assertion verifies that the method throws an exception when a null password is passed. This is to prevent null passwords from being digested and encoded, which would lead to a NullPointerException.

Scenario 3: Test to check if the digestPassword method returns different digested passwords for different plain text passwords.

Details:
  TestName: testDigestPasswordWithDifferentInputs.
  Description: This test checks if the digestPassword method returns different digested passwords for different plain text passwords.
Execution:
  Arrange: Create two different plain text passwords.
  Act: Call the digestPassword method with each of the passwords.
  Assert: The two returned strings should not be equal.
Validation:
  The assertion verifies that the method returns different digested passwords for different plain text passwords. This is to ensure that the method is correctly digesting and encoding each password.
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.*;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

public class CustomerDigestPasswordTest {

	private Customer customer;

	@Before
	public void setUp() {
		customer = new Customer();
	}

	@Test
	@Category(Categories.valid.class)
	public void testDigestPasswordWithValidInput() {
		String plainTextPassword = "password123";
		String digestedPassword = customer.digestPassword(plainTextPassword);

		assertNotNull(digestedPassword);
		assertNotEquals(plainTextPassword, digestedPassword);
	}

	@Test(expected = RuntimeException.class)
	@Category(Categories.invalid.class)
	public void testDigestPasswordWithNullInput() {
		String nullPassword = null;
		customer.digestPassword(nullPassword);
	}

	@Test
	@Category(Categories.valid.class)
	public void testDigestPasswordWithDifferentInputs() {
		String password1 = "password123";
		String password2 = "password456";

		String digestedPassword1 = customer.digestPassword(password1);
		String digestedPassword2 = customer.digestPassword(password2);
		assertNotEquals(digestedPassword1, digestedPassword2);
	}

}