// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=getSubTotal_789cda531c
ROOST_METHOD_SIG_HASH=getSubTotal_5cb0f48757

"""
Scenario 1: Test when the quantity and unit cost are positive integers
TestName: testSubTotalWithPositiveValues
Description: This test checks the functionality of getSubTotal() when both quantity and unit cost are positive integers.
Execution:
  Arrange: Create an OrderLine object with quantity as 5 and unit cost as 10.
  Act: Invoke getSubTotal() on the OrderLine object.
  Assert: Check if the returned value is 50.0.
Validation:
  The assertion verifies that the method correctly calculates the subtotal when both quantity and unit cost are positive. It is significant as it checks the basic functionality of the method.

Scenario 2: Test when the quantity is zero
TestName: testSubTotalWithZeroQuantity
Description: This test checks the functionality of getSubTotal() when the quantity is zero.
Execution:
  Arrange: Create an OrderLine object with quantity as 0 and unit cost as 10.
  Act: Invoke getSubTotal() on the OrderLine object.
  Assert: Check if the returned value is 0.0.
Validation:
  The assertion verifies that the method correctly calculates the subtotal when the quantity is zero. It is significant as it confirms the correctness of the method when the quantity is zero.

Scenario 3: Test when the unit cost is zero
TestName: testSubTotalWithZeroUnitCost
Description: This test checks the functionality of getSubTotal() when the unit cost is zero.
Execution:
  Arrange: Create an OrderLine object with quantity as 5 and unit cost as 0.
  Act: Invoke getSubTotal() on the OrderLine object.
  Assert: Check if the returned value is 0.0.
Validation:
  The assertion verifies that the method correctly calculates the subtotal when the unit cost is zero. It is significant as it confirms the correctness of the method when the unit cost is zero.

Scenario 4: Test when the quantity is negative
TestName: testSubTotalWithNegativeQuantity
Description: This test checks the functionality of getSubTotal() when the quantity is negative.
Execution:
  Arrange: Create an OrderLine object with quantity as -5 and unit cost as 10.
  Act: Invoke getSubTotal() on the OrderLine object.
  Assert: Check if the returned value is -50.0.
Validation:
  The assertion verifies that the method correctly calculates the subtotal when the quantity is negative. It is significant as it confirms the correctness of the method when the quantity is negative.

Scenario 5: Test when the unit cost is negative
TestName: testSubTotalWithNegativeUnitCost
Description: This test checks the functionality of getSubTotal() when the unit cost is negative.
Execution:
  Arrange: Create an OrderLine object with quantity as 5 and unit cost as -10.
  Act: Invoke getSubTotal() on the OrderLine object.
  Assert: Check if the returned value is -50.0.
Validation:
  The assertion verifies that the method correctly calculates the subtotal when the unit cost is negative. It is significant as it confirms the correctness of the method when the unit cost is negative.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Before;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.*;
import javax.persistence.*;
import javax.validation.constraints.Min;
import java.io.Serializable;
import java.util.Objects;

public class OrderLineGetSubTotalTest {

	private OrderLine orderLine;

	private Item item;

	@Before
	public void setUp() {
		item = new Item();
		orderLine = new OrderLine();
	}

	@Test
	@Category(Categories.valid.class)
	public void testSubTotalWithPositiveValues() {
		orderLine.setQuantity(5);
		item.setUnitCost(10f);
		orderLine.setItem(item);
		Float expected = 50.0f;
		Float actual = orderLine.getSubTotal();
		assertEquals(expected, actual);
	}

	@Test
	@Category(Categories.valid.class)
	public void testSubTotalWithZeroQuantity() {
		orderLine.setQuantity(0);
		item.setUnitCost(10f);
		orderLine.setItem(item);
		Float expected = 0.0f;
		Float actual = orderLine.getSubTotal();
		assertEquals(expected, actual);
	}

	@Test
	@Category(Categories.valid.class)
	public void testSubTotalWithZeroUnitCost() {
		orderLine.setQuantity(5);
		item.setUnitCost(0f);
		orderLine.setItem(item);
		Float expected = 0.0f;
		Float actual = orderLine.getSubTotal();
		assertEquals(expected, actual);
	}

	@Test
	@Category(Categories.invalid.class)
	public void testSubTotalWithNegativeQuantity() {
		orderLine.setQuantity(-5);
		item.setUnitCost(10f);
		orderLine.setItem(item);
		Float expected = -50.0f;
		Float actual = orderLine.getSubTotal();
		assertEquals(expected, actual);
	}

	@Test
	@Category(Categories.invalid.class)
	public void testSubTotalWithNegativeUnitCost() {
		orderLine.setQuantity(5);
		item.setUnitCost(-10f);
		orderLine.setItem(item);
		Float expected = -50.0f;
		Float actual = orderLine.getSubTotal();
		assertEquals(expected, actual);
	}

}