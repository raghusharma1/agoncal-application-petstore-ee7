// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=hashCode_9a16c29af0
ROOST_METHOD_SIG_HASH=hashCode_44411a81c8

Scenario 1: Test for Same HashCode for Identical ISO Codes

Details:
  TestName: sameHashCodeForIdenticalIsoCodes
  Description: This test is meant to check if the hashCode method returns the same hash code for objects with identical ISO codes.
Execution:
  Arrange: Create two Country objects with identical ISO codes.
  Act: Invoke the hashCode method on both objects.
  Assert: Assert that the hash codes of both objects are identical.
Validation:
  The assertion verifies if the hashCode method is correctly generating the same hash code for identical ISO codes. This is significant as it ensures the correct functioning of the hashCode contract, which states that two equal objects must have the same hash code.

Scenario 2: Test for Different HashCode for Different ISO Codes

Details:
  TestName: differentHashCodeForDifferentIsoCodes
  Description: This test is meant to check if the hashCode method returns different hash codes for objects with different ISO codes.
Execution:
  Arrange: Create two Country objects with different ISO codes.
  Act: Invoke the hashCode method on both objects.
  Assert: Assert that the hash codes of both objects are different.
Validation:
  The assertion verifies if the hashCode method is correctly generating different hash codes for different ISO codes. This is significant as it ensures the correct functioning of the hashCode contract, which allows unequal objects to have different hash codes.

Scenario 3: Test for Consistent HashCode for Same Object

Details:
  TestName: consistentHashCodeForSameObject
  Description: This test is meant to check if the hashCode method returns the same hash code on multiple invocations on the same object.
Execution:
  Arrange: Create a Country object with a specific ISO code.
  Act: Invoke the hashCode method on the object multiple times.
  Assert: Assert that all hash codes are identical.
Validation:
  The assertion verifies if the hashCode method is correctly generating a consistent hash code upon multiple invocations on the same object. This is significant as it ensures the correct functioning of the hashCode contract, which states that the hash code of an object must remain consistent across multiple invocations as long as the object is not modified.
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import javax.persistence.*;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.Objects;

public class CountryHashCodeTest {

	@Test
	@Category(Categories.valid.class)
	public void sameHashCodeForIdenticalIsoCodes() {
		// Arrange
		Country country1 = new Country();
		country1.setIsoCode("US");
		Country country2 = new Country();
		country2.setIsoCode("US");
		// Act
		int hashCode1 = country1.hashCode();
		int hashCode2 = country2.hashCode();
		// Assert
		assertEquals(hashCode1, hashCode2);
	}

	@Test
	@Category(Categories.valid.class)
	public void differentHashCodeForDifferentIsoCodes() {
		// Arrange
		Country country1 = new Country();
		country1.setIsoCode("US");
		Country country2 = new Country();
		country2.setIsoCode("UK");
		// Act
		int hashCode1 = country1.hashCode();
		int hashCode2 = country2.hashCode();
		// Assert
		assertNotEquals(hashCode1, hashCode2);
	}

	@Test
	@Category(Categories.valid.class)
	public void consistentHashCodeForSameObject() {
		// Arrange
		Country country = new Country();
		country.setIsoCode("US");
		// Act
		int hashCode1 = country.hashCode();
		int hashCode2 = country.hashCode();
		// Assert
		assertEquals(hashCode1, hashCode2);
	}

}