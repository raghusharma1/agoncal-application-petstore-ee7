// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=getHomeAddress_ea5c4d4d35
ROOST_METHOD_SIG_HASH=getHomeAddress_607428f463

"""
Scenario 1: Test to ensure getHomeAddress returns the correct address

Details:
  TestName: testGetHomeAddress
  Description: This test aims to verify that the getHomeAddress method returns the correct address that was previously set.
Execution:
  Arrange: Create a new Customer object and set the home address to a known value.
  Act: Call getHomeAddress method on the customer object.
  Assert: Assert that the returned address is equal to the known value.
Validation:
  This test validates that the getHomeAddress method correctly returns the customer's home address. This is important to ensure that the customer's information is retrieved accurately when needed.

Scenario 2: Test to ensure getHomeAddress returns null when no address is set

Details:
  TestName: testGetHomeAddressWhenNotSet
  Description: This test aims to ensure that the getHomeAddress method returns null when the home address has not been set.
Execution:
  Arrange: Create a new Customer object without setting the home address.
  Act: Call getHomeAddress method on the customer object.
  Assert: Assert that the returned address is null.
Validation:
  This test validates that the getHomeAddress method correctly handles the case when the home address has not been set. This is important to ensure that the method does not throw an exception or return an unexpected value in such cases.

Scenario 3: Test to ensure getHomeAddress returns the latest address when the address is changed

Details:
  TestName: testGetHomeAddressAfterChange
  Description: This test verifies that the getHomeAddress method returns the latest address when the home address is changed.
Execution:
  Arrange: Create a new Customer object and set the home address to a known value. Then change the home address to a different value.
  Act: Call getHomeAddress method on the customer object.
  Assert: Assert that the returned address is equal to the latest value.
Validation:
  This test validates that the getHomeAddress method correctly returns the latest home address after changes. This is important to ensure that the customer's updated information is correctly reflected when retrieved.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.agoncal.application.petstore.model.Address;
import org.agoncal.application.petstore.model.Customer;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import static org.junit.Assert.*;
import org.agoncal.application.petstore.constraints.Email;
import org.agoncal.application.petstore.constraints.Login;
import javax.persistence.*;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Past;
import javax.validation.constraints.Size;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.security.MessageDigest;
import java.util.*;

public class CustomerGetHomeAddressTest {

	@Test
	@Category(Categories.valid.class)
	public void testGetHomeAddress() {
		// Arrange
		Address address = new Address("123 Main St", "Springfield", "12345", null);
		Customer customer = new Customer();
		customer.setHomeAddress(address);
		// Act
		Address result = customer.getHomeAddress();
		// Assert
		assertNotNull(result);
		assertEquals(address, result);
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetHomeAddressWhenNotSet() {
		// Arrange
		Customer customer = new Customer();
		// Act
		Address result = customer.getHomeAddress();
		// Assert
		assertNull(result);
	}

	@Test
	@Category(Categories.valid.class)
	public void testGetHomeAddressAfterChange() {
		// Arrange
		Address address1 = new Address("123 Main St", "Springfield", "12345", null);
		Address address2 = new Address("456 Elm St", "Shelbyville", "67890", null);
		Customer customer = new Customer();
		customer.setHomeAddress(address1);
		customer.setHomeAddress(address2);
		// Act
		Address result = customer.getHomeAddress();
		// Assert
		assertNotNull(result);
		assertEquals(address2, result);
	}

}