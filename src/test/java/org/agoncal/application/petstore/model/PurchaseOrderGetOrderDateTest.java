// ********RoostGPT********
/*
Test generated by RoostGPT for test junit4-petstore using AI Type  and AI Model

ROOST_METHOD_HASH=getOrderDate_42b50954e7
ROOST_METHOD_SIG_HASH=getOrderDate_c032551e3e

"""
Scenario 1: Validate the orderDate after PurchaseOrder object creation
Details:
  TestName: testOrderDateAfterCreation
  Description: This test is meant to validate that the orderDate is set automatically during the creation of a PurchaseOrder object.
Execution:
  Arrange: Create a new PurchaseOrder object.
  Act: Get the orderDate of the PurchaseOrder object.
  Assert: Assert that the orderDate is not null.
Validation:
  This assertion verifies that the orderDate is automatically set during the creation of a PurchaseOrder object. This is important as every order must have a date when it was created.

Scenario 2: Validate the orderDate after setting a specific date
Details:
  TestName: testOrderDateAfterSettingDate
  Description: This test is meant to validate that the orderDate can be set manually to a specific date.
Execution:
  Arrange: Create a new PurchaseOrder object and a specific Date object.
  Act: Set the orderDate of the PurchaseOrder object to the specific Date object and then get the orderDate.
  Assert: Assert that the retrieved orderDate is equal to the specific Date object.
Validation:
  This assertion verifies that the orderDate can be manually set to a specific date. This is useful when we want to create an order with a specific date.

Scenario 3: Validate the orderDate after resetting the date
Details:
  TestName: testOrderDateAfterResettingDate
  Description: This test is meant to validate that the orderDate can be reset to a new date after it was set to a specific date.
Execution:
  Arrange: Create a new PurchaseOrder object and two specific Date objects.
  Act: Set the orderDate of the PurchaseOrder object to the first Date object, then set it to the second Date object, and then get the orderDate.
  Assert: Assert that the retrieved orderDate is equal to the second Date object and not equal to the first Date object.
Validation:
  This assertion verifies that the orderDate can be reset to a new date. This is useful when we need to change the date of an order.

Scenario 4: Validate the equality of two PurchaseOrder objects with the same orderDate
Details:
  TestName: testEqualityOfPurchaseOrdersWithSameDate
  Description: This test is meant to validate that two PurchaseOrder objects with the same orderDate are equal.
Execution:
  Arrange: Create two PurchaseOrder objects with the same orderDate.
  Act: Compare the two PurchaseOrder objects for equality.
  Assert: Assert that the two PurchaseOrder objects are equal.
Validation:
  This assertion verifies that two PurchaseOrder objects with the same orderDate are considered equal. This is important for the correct functioning of collections that contain PurchaseOrder objects.

Scenario 5: Validate the hashCode of two PurchaseOrder objects with the same orderDate
Details:
  TestName: testHashCodeOfPurchaseOrdersWithSameDate
  Description: This test is meant to validate that two PurchaseOrder objects with the same orderDate have the same hashCode.
Execution:
  Arrange: Create two PurchaseOrder objects with the same orderDate.
  Act: Calculate the hashCode of the two PurchaseOrder objects.
  Assert: Assert that the two hashCodes are equal.
Validation:
  This assertion verifies that two PurchaseOrder objects with the same orderDate have the same hashCode. This is important for the correct functioning of collections that contain PurchaseOrder objects.
"""
*/

// ********RoostGPT********

package org.agoncal.application.petstore.model;

import org.agoncal.application.petstore.model.Address;
import org.agoncal.application.petstore.model.CreditCard;
import org.agoncal.application.petstore.model.Customer;
import org.agoncal.application.petstore.model.PurchaseOrder;
import org.junit.Test;
import org.junit.experimental.categories.Category;
import java.util.Date;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;
import javax.persistence.*;
import javax.validation.Valid;
import javax.xml.bind.annotation.XmlRootElement;
import java.io.Serializable;
import java.util.HashSet;
import java.util.Objects;
import java.util.Set;

public class PurchaseOrderGetOrderDateTest {

	@Test
	@Category(Categories.valid.class)
	public void testOrderDateAfterCreation() {
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		Date orderDate = purchaseOrder.getOrderDate();
		assertNotEquals(null, orderDate);
	}

	@Test
	@Category(Categories.valid.class)
	public void testOrderDateAfterSettingDate() {
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		Date specificDate = new Date();
		purchaseOrder.setOrderDate(specificDate);
		Date orderDate = purchaseOrder.getOrderDate();
		assertEquals(specificDate, orderDate);
	}

	@Test
	@Category(Categories.valid.class)
	public void testOrderDateAfterResettingDate() {
		PurchaseOrder purchaseOrder = new PurchaseOrder();
		Date firstDate = new Date();
		purchaseOrder.setOrderDate(firstDate);
		Date secondDate = new Date();
		purchaseOrder.setOrderDate(secondDate);
		Date orderDate = purchaseOrder.getOrderDate();
		assertEquals(secondDate, orderDate);
		assertNotEquals(firstDate, orderDate);
	}

	@Test
	@Category(Categories.valid.class)
	public void testEqualityOfPurchaseOrdersWithSameDate() {
		Date specificDate = new Date();
		PurchaseOrder firstPurchaseOrder = new PurchaseOrder();
		firstPurchaseOrder.setOrderDate(specificDate);
		PurchaseOrder secondPurchaseOrder = new PurchaseOrder();
		secondPurchaseOrder.setOrderDate(specificDate);
		assertEquals(firstPurchaseOrder, secondPurchaseOrder);
	}

	@Test
	@Category(Categories.valid.class)
	public void testHashCodeOfPurchaseOrdersWithSameDate() {
		Date specificDate = new Date();
		PurchaseOrder firstPurchaseOrder = new PurchaseOrder();
		firstPurchaseOrder.setOrderDate(specificDate);
		PurchaseOrder secondPurchaseOrder = new PurchaseOrder();
		secondPurchaseOrder.setOrderDate(specificDate);
		assertEquals(firstPurchaseOrder.hashCode(), secondPurchaseOrder.hashCode());
	}

}